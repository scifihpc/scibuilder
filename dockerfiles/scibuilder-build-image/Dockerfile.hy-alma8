FROM almalinux:8

RUN dnf groupinstall -y "Development Tools" \
  && dnf clean all \
  && rm -rf /var/cache/yum
 
# Add needed repos

RUN dnf install -y epel-release                  \
  && dnf config-manager --enable epel            \
  && dnf install -y yum-utils                    \
  && dnf config-manager --set-enabled powertools \
  && dnf update -y                               \
  && yum clean all                               \
  && rm -rf /var/cache/yum

# Install base software that will be needed

RUN dnf install -y                     \
  curl                                 \
  diffutils                            \
  gcc                                  \
  gcc-c++                              \
  gmp-devel                            \
  gnupg                                \
  openssl-devel                        \
  libffi-devel                         \
  Lmod                                 \
  m4                                   \
  make                                 \
  perl                                 \
  python39                             \
  platform-python-devel                \
  wget                                 \
  && dnf clean all                     \
  && rm -rf /var/cache/yum

# Install OHPC

ARG OHPC_VERSION=2-1.el8.x86_64

RUN set -eux;                                              \
  curl -o /tmp/ohpc-release-${OHPC_VERSION}.rpm http://repos.openhpc.community/OpenHPC/2/CentOS_8/x86_64/ohpc-release-${OHPC_VERSION}.rpm \
  && dnf install -y /tmp/ohpc-release-${OHPC_VERSION}.rpm  \
  && rm /tmp/ohpc-release-${OHPC_VERSION}.rpm              \
  && dnf update -y                                         \
  && dnf clean all                                         \
  && rm -rf /var/cache/yum

RUN dnf install -y                     \
  libibverbs                           \
  slurm                                \
  slurm-devel                          \
  && dnf clean all                     \
  && rm -rf /var/cache/yum

# Fix locales

RUN dnf install -y                     \
  glibc-locale-source                  \
  langpacks-en                         \
  glibc-all-langpacks                  \
  && dnf clean all                     \
  && rm -rf /var/cache/yum

RUN echo 'LANG="en_US.utf8"' > /etc/locale.conf \
  && dnf reinstall -y                   \
  glibc-common                         \
  && dnf clean all                     \
  && rm -rf /var/cache/yum

RUN localedef -i en_US -f UTF-8 en_US.UTF-8

# Install gosu

ARG GOSU_VERSION=1.14

RUN set -eux;                                     \
  curl -o /usr/local/bin/gosu -SL "https://github.com/tianon/gosu/releases/download/${GOSU_VERSION}/gosu-amd64" && \
  curl -o /usr/local/bin/gosu.asc -SL "https://github.com/tianon/gosu/releases/download/${GOSU_VERSION}/gosu-amd64.asc" && \
  export GNUPGHOME="$(mktemp -d)";                 \
  gpg --batch --keyserver hkps://keys.openpgp.org --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4; \
  gpg --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu && \
  rm -rf "$GNUPGHOME" /usr/local/bin/gosu.asc;     \
  chmod +x /usr/local/bin/gosu       && \
  gosu --version                     && \
  gosu nobody true

# Install scibuilder requirements

RUN mkdir /scibuilder
RUN mkdir /appl
RUN mkdir /spack
RUN mkdir /cache

RUN set -eux;                             \
  curl -o /tmp/Mambaforge-Linux-x86_64.sh -SL "https://github.com/conda-forge/miniforge/releases/latest/download/Mambaforge-Linux-x86_64.sh" && \
  bash /tmp/Mambaforge-Linux-x86_64.sh -b -p /opt/conda

COPY environment.yml /opt/conda/environment.yml

RUN /opt/conda/bin/mamba env update -n base -f /opt/conda/environment.yml

COPY activate-scibuilder-spack.sh /usr/local/bin/activate-scibuilder-spack

COPY entry.sh /entry.sh

ENTRYPOINT ["/entry.sh"]

